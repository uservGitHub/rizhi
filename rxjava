1 java
new Thread() {
  @override
  public void run() {
    super.run();
    // 其他操作
    getActivity().runOnUiThread(new Runnable() {
      @Override
      public void run() {
        // Ui 操作
      }
    }
  }
}
2 kotlin
async {
  // 其他操作
  runOnUiThread {
    // Ui 操作
  }
}
3 rxjava kotlin
Observable.fromIterable(collection)
  .flatMap({ Observable.just(...) })
  .filter({ it.xxx == yyy })
  .map({ NewObjectClass() })
  .repeat( n )
  .subscribeOn(Schedulers.io())
  .observeOn(Schedulers.newThread())  
  // Schedulers.newThread() 等同于 async, 
  // AndroidSchedulers.mainThread 等同于 async + runOnUiThread
  .subscribe({
    // 其他操作
    // Ui 操作, 是否使用runOnUiThread要看调度方式
  })

subscribeOn 指定被创建的事件内容将以何种线程发出
observeOn 指定处理发生的线程
map 实现事件对象的变换
flatMap 实现一对多的转换，改变的不仅仅是事件对象，还又事件本身Observable.xxx

1.0 -> 2.0
Action1 Consumer
Action2 BiConsumer

myObservable // observable will be subscribed on i/o thread
  .subscribeOn(Schedulers.io())
  .observeOn(AndroidSchedulers.mainThread())
  .map(/* this will be called on main thread... */)
  .doOnNext(/* ...and everything below until next observeOn */)
  .observeOn(Schedulers.io())
  .subscribe(/* this will be called on i/o thread */);
  
 如果 subscribe 中既有耗时又有Ui操作，那就需要借助runOnUiThread
