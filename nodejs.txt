REPL 控制台命令，见帮助文档
全局安装，require无法加载时，我的电脑->属性->高级->环境变量 NODE_PATH=(npm config ls中的prefix+'/node_modules/)
脚本执行
#!/usr/bin/env node
权限修改
$ chmod 755 filename
$ ./filename
参数传递
process.argv = [nodePath, filePath, param0,...paramn]
$ ./filename 123 abc
[nodePath, filePath, '123', 'abc']
子进程调用系统命令 mv
var spawn = require('child_process').spawn
mv = spawn('mv', ['a','b'])
mv.stdout.on('data', function(data){
  console.log('stdout:\n'+data)
})
mv.stderr.on('data', function(data){
  console.log('stderr:\n'+data)
})
mv.on('exit', function(code,signal){
  console.log('child process exit, code:'+code)
})
子进程执行命令
var exec = require('child_process').exec
var cmdStr = 'curl http://www.weather.com.cn/data/sk/101010100.html' 
exec(cmdStr, function(err,stdout,stderr){
  if(err){
    console.log('execute error:\n'+stderr)
  }else{
    var data = JSON.parse(stdout)
    console.log(data)
  }
})
exec('python xxx.py 123 abc', function(err,stdout,stderr){
  //...
})
调用/执行shell脚本
var sh = require('child_process').execFile
sh('xxx.sh', ['-H','localhost'], null, function(err, stdout, stderr){
  //...
})
使用shelljs库
var sh = require('shelljs')
if(!sh.which('git')){
  console.log('require git')
  sh.exit(1)
}
sh.rm('-rf', 'out/Release')
sh.cp('-R', 'stuff/', 'out/Release')
sh.cd('lib')
if (sh.exec('git commit -am "Auto-commit"').code !== 0) {
  sh.echo('Error: Git commit failed')
  sh.exit(1)
}
重定向
var sin = process.stdin
var sout = process.stdout
sin.resume() //对接输入，可用于管道
sin.setEncoding('utf8')
sin.on('data', function(data){
  sout.write(data)
})
$ echo 'cat' | ./print
系统信号
process.on('SIGINT', function () {
  console.log('Got a SIGINT')
  process.exit(0)
})
$ kill -s SIGINT [process_id]
管道
var fs = require('fs')
var zlib = require('zlib')
fs.createReadStream('xxx.txt')
  .pipe(zlib.createGzip())
  .pipe(fs.createWriteStream('xxx.txt.gz'))
fs.ceateReadStream('xxx.txt.gz')
  .pipe(zlib.createGunzip())
  .pipe(fs.createWriteStream('xxx.txt'))
var request = require('request')
var post = request.post(url)
process.stdin
  .pipe(fetch)
  .pipe(process.stdout)
stdin-->post-->stdout
process.stdin.pipe(process.stdout)
process.stdin.pipe(fs.createWriteStream('out.txt'))
fs.createReadStream('in.txt').pipe(process.stdin)
stream.Transform
class ThroughStream extends stream.Transform {
  constructor(options) {
    super(options);
  }
  _transform(chunk, enc, cb) {
    this.push(chunk.toString().replace(/\n/, '').toUpperCase());
    cb();
  }
}
process.stdin.pipe(
  new ThroughStream({
    objectMode: true
  })
).pipe(process.stdout)

